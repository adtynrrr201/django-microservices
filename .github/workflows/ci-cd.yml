name: Django Monorepo CI/CD (Home Server via Tailscale)

on:
  push:
    branches: ["main"]

jobs:
  # === CI ===
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: coba
          POSTGRES_USER: aditya
          POSTGRES_PASSWORD: adityanur
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U aditya -d coba"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://aditya:adityanur@localhost:5432/coba

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U aditya -d coba; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... Attempt $i/10"
            sleep 3
          done

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests for ${{ matrix.service }}
        run: python manage.py test ${{ matrix.service }} --noinput

  # === CD: Docker Build & Push (Multi-arch) ===
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myproject:latest
          
   # === CD: Deploy to Home Server via Tailscale ===
  deploy-home:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4

      # Setup Tailscale
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TAILSCALE_AUTH_KEY }}
          hostname: github-actions-runner
          tags: tag:ci

      - name: Wait for Tailscale
        run: |
          echo "Waiting 10s for Tailscale..."
          sleep 10
          tailscale status

      # Load SSH key into agent
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Add server to known_hosts
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # **PERBAIKAN: Gunakan docker compose (V2) dengan spasi**
      - name: Deploy ${{ matrix.service }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          TAILSCALE_IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          SERVICE=${{ matrix.service }}
          echo "ðŸš€ Deploying $SERVICE to $SSH_USER@$TAILSCALE_IP"
          
          # Gunakan heredoc untuk menghindari quoting issues
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            $SSH_USER@$TAILSCALE_IP
            set -e  # Exit on error
            
            echo "1. Pulling latest image for $SERVICE..."
            docker pull $DOCKERHUB_USERNAME/$SERVICE:latest
            
            echo "2. Changing to application directory..."
            cd /home/$SSH_USER
            
            echo "3. Pulling and starting service..."
            docker compose pull $SERVICE
            docker compose up -d $SERVICE
            
            echo "4. Checking service status..."
            docker ps --filter name=$SERVICE
            
            echo "âœ… Deployment completed successfully"

      - name: Verify deployment
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            ${{ secrets.SSH_USER }}@${{ secrets.HOME_SERVER_TAILSCALE_IP }} \
            "docker ps --filter name=${{ matrix.service }} --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"

