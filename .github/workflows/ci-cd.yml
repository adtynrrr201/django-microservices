name: Django Monorepo CI/CD (Home Server via Tailscale)

on:
  push:
    branches: ["main"]

jobs:
  # === CI ===
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: coba
          POSTGRES_USER: aditya
          POSTGRES_PASSWORD: adityanur
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U aditya -d coba"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://aditya:adityanur@localhost:5432/coba

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U aditya -d coba; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... Attempt $i/10"
            sleep 3
          done

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests for ${{ matrix.service }}
        run: python manage.py test ${{ matrix.service }} --noinput

  # === CD: Docker Build & Push (Multi-arch) ===
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myproject:latest
          
   # === CD: Deploy to Home Server ===
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug information
        run: |
          echo "Service: ${{ matrix.service }}"
          echo "SSH User: ${{ secrets.SSH_USER }}"
          echo "Tailscale IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          echo "DockerHub Username: ${{ secrets.DOCKERHUB_USERNAME }}"

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Verify SSH key loaded
        run: |
          echo "Loaded SSH keys:"
          ssh-add -l

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          echo "Adding $IP to known_hosts"
          
          # Remove existing entry
          ssh-keygen -R "$IP" 2>/dev/null || true
          
          # Add with retry logic
          for i in {1..5}; do
            if ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "‚úÖ Successfully added $IP to known_hosts"
              break
            else
              echo "‚ùå Attempt $i failed. Retrying in 3 seconds..."
              sleep 3
            fi
          done
          
          chmod 644 ~/.ssh/known_hosts

      - name: Test network connectivity
        run: |
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          echo "Testing connectivity to $IP"
          
          # Test basic connectivity
          if ping -c 2 -W 2 "$IP" &> /dev/null; then
            echo "‚úÖ Ping successful"
          else
            echo "‚ö†Ô∏è  Ping failed (may be normal for Tailscale)"
          fi
          
          # Test SSH port
          if nc -zv -w 5 "$IP" 22; then
            echo "‚úÖ SSH port (22) is open"
          else
            echo "‚ùå SSH port (22) is not accessible"
            exit 1
          fi

      - name: Test SSH connection
        run: |
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.HOME_SERVER_TAILSCALE_IP }} \
            "echo '‚úÖ SSH connection successful'"

      - name: Deploy ${{ matrix.service }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          TAILSCALE_IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "üöÄ Deploying ${{ matrix.service }} to home server..."
          echo "üì° Target: $SSH_USER@$TAILSCALE_IP"
          
          # Gunakan heredoc untuk multi-line commands yang lebih clean
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no \
            $SSH_USER@$TAILSCALE_IP << EOF
            set -e  # Exit on error
            
            echo "1. Pulling latest image for ${{ matrix.service }}..."
            docker pull $DOCKERHUB_USERNAME/${{ matrix.service }}:latest
            
            echo "2. Starting/updating service..."
            cd /home/$SSH_USER
            docker compose pull ${{ matrix.service }}
            docker compose up -d ${{ matrix.service }}
            
            echo "3. Cleaning up unused images..."
            docker image prune -f
            
            echo "4. Checking service status..."
            docker ps --filter "name=${{ matrix.service }}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            echo "‚úÖ ${{ matrix.service }} deployment completed successfully"
