name: Django Monorepo CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  # === CI ===
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: coba_coba
          POSTGRES_USER: aditya
          POSTGRES_PASSWORD: adityanur
        options: >-
          --health-cmd="pg_isready -U aditya -d coba_coba"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # âœ… gunakan host internal 'postgres' (nama servicenya)
      DATABASE_URL: postgres://aditya:adityanur@postgres:5432/coba_coba

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (global)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for DB
        run: |
          until pg_isready -h postgres -p 5432 -U aditya; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests for ${{ matrix.service }}
        run: python manage.py test ${{ matrix.service }}

  # === CD: Docker Build & Push ===
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

  # === CD: Deploy to Staging ===
  deploy-staging:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]
      fail-fast: true

    steps:
      - uses: actions/checkout@v4

      - name: Start ssh-agent and add key (Staging)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add staging host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.STAGING_HOST }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy ${{ matrix.service }} to STAGING
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "Deploying ${{ matrix.service }} to STAGING..."
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes ${SSH_USER}@${STAGING_HOST} \
            "docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service }}:latest && \
             docker compose -f /home/${SSH_USER}/docker-compose.staging.yml up -d ${{ matrix.service }}"

  # === CD: Deploy to Production ===
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]
      fail-fast: true

    steps:
      - uses: actions/checkout@v4

      - name: Start ssh-agent and add key (Production)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add production host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.PRODUCTION_HOST }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy ${{ matrix.service }} to PRODUCTION
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "Deploying ${{ matrix.service }} to PRODUCTION..."
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes ${SSH_USER}@${PRODUCTION_HOST} \
            "docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service }}:latest && \
             docker compose -f /home/${SSH_USER}/docker-compose.prod.yml up -d ${{ matrix.service }}"
