name: Django Monorepo CI/CD (Home Server via Tailscale)

on:
  push:
    branches: ["main"]

jobs:
  # === CI: Build & Test ===
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: coba-coba
          POSTGRES_USER: aditya
          POSTGRES_PASSWORD: adityanur
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U aditya -d coba-coba"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://aditya:adityanur@localhost:5432/coba-coba

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U aditya; do sleep 2; done
      - name: Run migrations
        run: python manage.py migrate --noinput
      - name: Run tests for ${{ matrix.service }}
        run: python manage.py test ${{ matrix.service }}

  # === CD: Docker Build & Push (Multi-arch) ===
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

  # === CD: Deploy to Home Server via Tailscale ===
  deploy-home:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4

      # Load SSH private key
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Add home server Tailscale IP to known_hosts
      - name: Add Tailscale IP to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.HOME_TAILSCALE_IP }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Deploy service via SSH
      - name: Deploy ${{ matrix.service }} to Home Server
        env:
          SSH_USER: ${{ secrets.HOME_SSH_USER }}
          TAILSCALE_IP: ${{ secrets.HOME_TAILSCALE_IP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "Deploying ${{ matrix.service }} to home server..."
          ssh -o StrictHostKeyChecking=no ${SSH_USER}@${TAILSCALE_IP} \
            "docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service }}:latest && \
             docker compose -f /home/${SSH_USER}/docker-compose.yml up -d ${{ matrix.service }}"
