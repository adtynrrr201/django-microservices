name: Django Monorepo CI/CD (Home Server via Tailscale)

on:
  push:
    branches: ["main"]

jobs:
  # === CI ===
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: coba
          POSTGRES_USER: aditya
          POSTGRES_PASSWORD: adityanur
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U aditya -d coba"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://aditya:adityanur@localhost:5432/coba

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U aditya -d coba; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... Attempt $i/10"
            sleep 3
          done

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests for ${{ matrix.service }}
        run: python manage.py test ${{ matrix.service }} --noinput

  # === CD: Docker Build & Push (Multi-arch) ===
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myproject:latest
          
 # === CD: Deploy to Home Server ===
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Tailscale
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TAILSCALE_AUTH_KEY }}
          hostname: github-actions-runner

      - name: Wait for Tailscale connection
        run: |
          echo "Waiting for Tailscale to connect..."
          sleep 15
          echo "Tailscale status:"
          tailscale status || echo "Tailscale status not available"

      # **FIX 1: Setup SSH Key dengan Format yang Benar**
      - name: Setup SSH Key Properly
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write private key dengan format yang benar
          cat > ~/.ssh/id_rsa << 'EOF'
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOF
          
          chmod 600 ~/.ssh/id_rsa
          
          # Verify key format
          echo "=== SSH Key Verification ==="
          ls -la ~/.ssh/
          echo "Key content (first 3 lines):"
          head -3 ~/.ssh/id_rsa
          echo "Key content (last 3 lines):"
          tail -3 ~/.ssh/id_rsa
          
          # Test if key is valid
          if ssh-keygen -l -f ~/.ssh/id_rsa; then
            echo "‚úÖ SSH key is valid"
          else
            echo "‚ùå SSH key is invalid"
            exit 1
          fi

      - name: Add server to known_hosts
        run: |
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          echo "Adding $IP to known_hosts"
          ssh-keygen -R "$IP" 2>/dev/null || true
          ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts 2>/dev/null
          chmod 644 ~/.ssh/known_hosts

      # **FIX 2: Test SSH Connection dengan Verbose Debugging**
      - name: Debug SSH Connection
        run: |
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          USER="${{ secrets.SSH_USER }}"
          
          echo "=== SSH Connection Debug ==="
          echo "User: $USER"
          echo "IP: $IP"
          echo "Key file exists: $(test -f ~/.ssh/id_rsa && echo 'YES' || echo 'NO')"
          echo "Key permissions: $(ls -l ~/.ssh/id_rsa)"
          
          # Test with verbose output
          echo "=== Testing SSH Connection (Verbose) ==="
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -v \
            $USER@$IP "echo 'SSH TEST SUCCESS'" || echo "SSH TEST FAILED"

      # **FIX 3: Deploy dengan Simple Commands**
      - name: Deploy ${{ matrix.service }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          TAILSCALE_IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          SERVICE="${{ matrix.service }}"
          echo "üöÄ Deploying $SERVICE to home server..."
          echo "üì° Target: $SSH_USER@$TAILSCALE_IP"
          
          # Simple one-liner commands
          set -x  # Enable debug output
          
          # 1. Pull image
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            $SSH_USER@$TAILSCALE_IP \
            "docker pull $DOCKERHUB_USERNAME/$SERVICE:latest"
          
          # 2. Update service
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            $SSH_USER@$TAILSCALE_IP \
            "cd /home/$SSH_USER && docker compose up -d $SERVICE"
          
          # 3. Verify
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            $SSH_USER@$TAILSCALE_IP \
            "docker ps --filter name=$SERVICE"
          
          set +x  # Disable debug output
          echo "‚úÖ $SERVICE deployment completed"

  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment summary
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ All deployments completed successfully"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi