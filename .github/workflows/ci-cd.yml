name: Django Monorepo CI/CD (Home Server via Tailscale)

on:
  push:
    branches: ["main"]

jobs:
  # === CI ===
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: coba
          POSTGRES_USER: aditya
          POSTGRES_PASSWORD: adityanur
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U aditya -d coba"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://aditya:adityanur@localhost:5432/coba

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U aditya -d coba; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... Attempt $i/10"
            sleep 3
          done

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests for ${{ matrix.service }}
        run: python manage.py test ${{ matrix.service }} --noinput

  # === CD: Docker Build & Push (Multi-arch) ===
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myproject:latest
          
  # === CD: Deploy to Home Server ===
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Tailscale
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TAILSCALE_AUTH_KEY }}
          hostname: github-actions-runner

      - name: Wait for Tailscale connection
        run: |
          echo "Waiting for Tailscale to connect..."
          sleep 15
          echo "Tailscale status:"
          tailscale status || echo "Tailscale status not available"

      # **PERBAIKAN 1: Setup SSH dengan cara yang lebih reliable**
      - name: Setup SSH using key file
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write private key to file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Verify key format
          echo "=== SSH Key Info ==="
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Key format check failed"
          
          # Also add to agent for backup
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Add server to known_hosts
        run: |
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          echo "Adding $IP to known_hosts"
          
          ssh-keygen -R "$IP" 2>/dev/null || true
          ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts 2>/dev/null || echo "Keyscan failed, continuing..."
          chmod 644 ~/.ssh/known_hosts

      # **PERBAIKAN 2: Test SSH connection dengan identity file explicit**
      - name: Test SSH connection
        run: |
          set +e  # Don't exit on error for testing
          
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          USER="${{ secrets.SSH_USER }}"
          
          echo "=== Testing SSH Connection ==="
          echo "Trying to connect to $USER@$IP"
          
          # Method 1: With identity file
          echo "Method 1: Using identity file"
          ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i ~/.ssh/id_rsa \
            $USER@$IP "echo '‚úÖ Identity file method successful'"
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Identity file method failed"
            
            # Method 2: With agent
            echo "Method 2: Using SSH agent"
            ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no \
              $USER@$IP "echo '‚úÖ Agent method successful'"
              
            if [ $? -ne 0 ]; then
              echo "‚ùå All SSH methods failed"
              echo "=== Debug Info ==="
              echo "SSH User: $USER"
              echo "IP: $IP"
              echo "Key file contents (first line):"
              head -1 ~/.ssh/id_rsa
              exit 1
            fi
          fi
          
          set -e  # Re-enable exit on error

      # **PERBAIKAN 3: Deploy dengan method yang lebih simple (tanpa heredoc)**
      - name: Deploy ${{ matrix.service }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          TAILSCALE_IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "üöÄ Deploying ${{ matrix.service }} to home server..."
          echo "üì° Target: $SSH_USER@$TAILSCALE_IP"
          
          # Simple one-liner commands to avoid heredoc issues
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            $SSH_USER@$TAILSCALE_IP \
            "docker pull $DOCKERHUB_USERNAME/${{ matrix.service }}:latest"
          
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            $SSH_USER@$TAILSCALE_IP \
            "cd /home/$SSH_USER && docker compose pull ${{ matrix.service }}"
          
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            $SSH_USER@$TAILSCALE_IP \
            "cd /home/$SSH_USER && docker compose up -d ${{ matrix.service }}"
          
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            $SSH_USER@$TAILSCALE_IP \
            "docker image prune -f"
          
          echo "‚úÖ ${{ matrix.service }} deployment commands sent"

      - name: Verify deployment
        run: |
          ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            ${{ secrets.SSH_USER }}@${{ secrets.HOME_SERVER_TAILSCALE_IP }} \
            "docker ps --filter 'name=${{ matrix.service }}' --format 'table {{.Names}}\t{{.Status}}'"