name: Django Monorepo CI/CD (Home Server via Tailscale)

on:
  push:
    branches: ["main"]

jobs:
  # === CI ===
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
       service: [auth_service, order_service]

    services:
       postgres:
        image: postgres:16
        env:
          POSTGRES_DB: coba
          POSTGRES_USER: aditya
          POSTGRES_PASSWORD: adityanur
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U aditya -d coba"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://aditya:adityanur@localhost:5432/coba

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (global)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for DB
        run: |
          until pg_isready -h localhost -p 5432 -U aditya; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests for ${{ matrix.service }}
        run: python manage.py test ${{ matrix.service }}

  # === CD: Docker Build & Push (Multi-arch) ===
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

# === CD: Deploy to Home Server via Tailscale ===
deploy-home:
  needs: docker-build-and-push
  runs-on: ubuntu-latest
  strategy:
    matrix:
      service: [auth_service, order_service]
    fail-fast: false

  steps:
    - uses: actions/checkout@v4

    # Method 1: Using ssh-agent (recommended)
    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Debug SSH Keys
      run: |
        echo "=== Debug SSH Setup ==="
        echo "SSH User: ${{ secrets.SSH_USER }}"
        echo "Server IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
        echo "Loaded keys:"
        ssh-add -l
        echo "SSH Agent PID: $SSH_AGENT_PID"
        echo "SSH Auth Socket: $SSH_AUTH_SOCK"

    # Add to known_hosts
    - name: Add to known_hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
        echo "Adding $IP to known_hosts"
        
        ssh-keygen -R "$IP" 2>/dev/null || true
        
        for i in {1..5}; do
          if ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "Successfully added $IP"
            break
          fi
          echo "Attempt $i failed, retrying..."
          sleep 2
        done
        
        chmod 644 ~/.ssh/known_hosts

    # Test connection dengan multiple methods
    - name: Test SSH Connection
      run: |
        set +e  # Don't exit on error for testing
        
        echo "=== Testing SSH Connection ==="
        
        # Method 1: With agent
        echo "Method 1: Using SSH agent"
        ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no \
          -o PasswordAuthentication=no \
          ${{ secrets.SSH_USER }}@${{ secrets.HOME_SERVER_TAILSCALE_IP }} \
          "echo 'Agent method successful'"
        
        if [ $? -ne 0 ]; then
          echo "Agent method failed, trying identity file method..."
          
          # Method 2: Using identity file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          
          ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no \
            -o PasswordAuthentication=no \
            -i /tmp/deploy_key \
            ${{ secrets.SSH_USER }}@${{ secrets.HOME_SERVER_TAILSCALE_IP }} \
            "echo 'Identity file method successful'"
        fi
        
        set -e  # Re-enable exit on error

    # Deploy service
    - name: Deploy ${{ matrix.service }}
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SERVER_IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      run: |
        echo "ðŸš€ Deploying ${{ matrix.service }}..."
        
        ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no \
          ${SSH_USER}@${SERVER_IP} \
          "docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service }}:latest && \
           cd /home/${SSH_USER} && \
           docker compose up -d ${{ matrix.service }} && \
           echo 'âœ… Deployment successful'"