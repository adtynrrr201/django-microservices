name: Django Monorepo CI/CD (Home Server via Tailscale)

on:
  push:
    branches: ["main"]

jobs:
  # === CI ===
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: coba
          POSTGRES_USER: aditya
          POSTGRES_PASSWORD: adityanur
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U aditya -d coba"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://aditya:adityanur@localhost:5432/coba

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U aditya -d coba; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... Attempt $i/10"
            sleep 3
          done

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests for ${{ matrix.service }}
        run: python manage.py test ${{ matrix.service }} --noinput

  # === CD: Docker Build & Push (Multi-arch) ===
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myproject:latest
          
  # === CD: Deploy to Home Server ===
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # üö® PENTING: Setup Tailscale di runner GitHub Actions
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TAILSCALE_AUTH_KEY }}
          hostname: github-actions-runner
          tags: tag:ci

      - name: Wait for Tailscale connection
        run: |
          echo "Waiting for Tailscale to connect..."
          sleep 10
          tailscale status

      - name: Debug information
        run: |
          echo "Service: ${{ matrix.service }}"
          echo "SSH User: ${{ secrets.SSH_USER }}"
          echo "Tailscale IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          echo "DockerHub Username: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "Current Tailscale IPs:"
          tailscale ip || echo "Tailscale IP command not available"

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Verify SSH key loaded
        run: |
          echo "Loaded SSH keys:"
          ssh-add -l

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          echo "Adding $IP to known_hosts"
          
          # Remove existing entry
          ssh-keygen -R "$IP" 2>/dev/null || true
          
          # Add with retry logic
          for i in {1..10}; do
            if ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "‚úÖ Successfully added $IP to known_hosts"
              break
            else
              echo "‚ùå Attempt $i failed. Retrying in 5 seconds..."
              sleep 5
            fi
            if [ $i -eq 10 ]; then
              echo "‚ö†Ô∏è  Continuing without known_hosts verification"
            fi
          done
          
          chmod 644 ~/.ssh/known_hosts

      - name: Test Tailscale connectivity
        run: |
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          echo "Testing Tailscale connectivity to $IP"
          
          # Test dengan Tailscale (should work)
          if tailscale ping -c 2 "$IP" 2>/dev/null; then
            echo "‚úÖ Tailscale ping successful"
          else
            echo "‚ö†Ô∏è  Tailscale ping failed, but continuing..."
          fi
          
          # Test SSH port dengan timeout lebih lama
          echo "Testing SSH connection..."
          timeout 30 bash -c "
            until nc -zv -w 5 '$IP' 22; do
              echo 'SSH port not ready, retrying in 3 seconds...'
              sleep 3
            done
          " && echo "‚úÖ SSH port is open" || echo "‚ö†Ô∏è  SSH port test timeout, but continuing..."

      - name: Test SSH connection
        run: |
          set +e  # Jangan exit on error untuk testing
          
          echo "Testing SSH connection to ${{ secrets.HOME_SERVER_TAILSCALE_IP }}..."
          
          # Test dengan berbagai metode
          for i in {1..5}; do
            if ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no \
              ${{ secrets.SSH_USER }}@${{ secrets.HOME_SERVER_TAILSCALE_IP }} \
              "echo '‚úÖ SSH connection successful (Attempt $i)'"; then
              break
            else
              echo "‚ùå SSH attempt $i failed, retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          set -e  # Kembalikan exit on error

      - name: Deploy ${{ matrix.service }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          TAILSCALE_IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "üöÄ Deploying ${{ matrix.service }} to home server..."
          echo "üì° Target: $SSH_USER@$TAILSCALE_IP"
          
          # Deploy dengan retry logic
          for attempt in {1..3}; do
            echo "Deployment attempt $attempt..."
            
            if ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no \
              $SSH_USER@$TAILSCALE_IP << 'EOF'; then
              set -e
              
              echo "1. Pulling latest image for ${{ matrix.service }}..."
              docker pull $DOCKERHUB_USERNAME/${{ matrix.service }}:latest
              
              echo "2. Starting/updating service..."
              cd /home/$SSH_USER
              docker compose pull ${{ matrix.service }}
              docker compose up -d ${{ matrix.service }}
              
              echo "3. Cleaning up unused images..."
              docker image prune -f
              
              echo "4. Checking service status..."
              docker ps --filter "name=${{ matrix.service }}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              
              echo "‚úÖ ${{ matrix.service }} deployment completed successfully"
              break
            else
              echo "‚ùå Deployment attempt $attempt failed"
              if [ $attempt -lt 3 ]; then
                echo "Retrying in 10 seconds..."
                sleep 10
              else
                echo "All deployment attempts failed"
                exit 1
              fi
            fi
          done

      - name: Verify deployment
        run: |
          ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.HOME_SERVER_TAILSCALE_IP }} \
            "echo '=== Service Status ===' && \
             docker ps --filter 'name=${{ matrix.service }}' --format 'table {{.Names}}\t{{.Status}}' && \
             echo '=== Recent Logs ===' && \
             docker logs ${{ matrix.service }} --tail 20 2>/dev/null || echo 'No logs available'"
