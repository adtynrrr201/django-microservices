name: Django Monorepo CI/CD (Home Server via Tailscale)

on:
  push:
    branches: ["main"]

jobs:
  # === CI ===
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
       service: [auth_service, order_service]

    services:
       postgres:
        image: postgres:16
        env:
          POSTGRES_DB: coba
          POSTGRES_USER: aditya
          POSTGRES_PASSWORD: adityanur
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U aditya -d coba"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://aditya:adityanur@localhost:5432/coba

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies (global)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for DB
        run: |
          until pg_isready -h localhost -p 5432 -U aditya; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests for ${{ matrix.service }}
        run: python manage.py test ${{ matrix.service }}

  # === CD: Docker Build & Push (Multi-arch) ===
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

  # === CD: Deploy to Home Server ===
  deploy-production:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, order_service]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug information
        run: |
          echo "Deploying service: ${{ matrix.service }}"
          echo "SSH User: ${{ secrets.SSH_USER }}"
          echo "Server IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}"

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          IP="${{ secrets.HOME_SERVER_TAILSCALE_IP }}"
          echo "Adding $IP to known_hosts"
          
          ssh-keygen -R "$IP" 2>/dev/null || true
          
          for i in {1..5}; do
            if ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "Successfully added $IP to known_hosts"
              break
            else
              echo "Attempt $i failed. Retrying in 3 seconds..."
              sleep 3
            fi
          done
          
          chmod 644 ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.HOME_SERVER_TAILSCALE_IP }} \
            "echo 'SSH connection successful'"

      - name: Deploy service
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SERVER_IP: ${{ secrets.HOME_SERVER_TAILSCALE_IP }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "Deploying ${{ matrix.service }} to production..."
          
          ssh -o ConnectTimeout=15 -o StrictHostKeyChecking=no \
            $SSH_USER@$SERVER_IP \
            "docker pull $DOCKERHUB_USERNAME/${{ matrix.service }}:latest && \
             cd /home/$SSH_USER && \
             docker compose pull ${{ matrix.service }} && \
             docker compose up -d ${{ matrix.service }} && \
             docker image prune -f && \
             echo 'Deployment successful'"

      - name: Verify deployment
        run: |
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.HOME_SERVER_TAILSCALE_IP }} \
            "docker ps --filter 'name=${{ matrix.service }}' --format 'table {{.Names}}\t{{.Status}}'"